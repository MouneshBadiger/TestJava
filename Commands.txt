java -jar [jarfile]
java -cp [classpath_loc1]:[classpath_loc2] [System_aguments] package.MainMethod [Program_arguments]

Linux Commands
---------------------------
1.top-------> memory usage
2.ps    process details
3.ps -A |grep java    ----java processes running
4.kill -9 PID   ------Kill process with pid
5.set environment variable: set NAME=VALUE
6.print envrionment variable: echo %VARIABLE_NAME%
7. touch fileName : create empty file
8.cat fileName  : opens file
9.vi fileName  : openes editer :wq and :q! to exit
10.grep <searchElement> fileName  : to filter lines with matching expression 
11. cut -d<delimeter> -f<columnNo> <fileName>  : Same as Java string spliting
12.comm <file1> <file2> : The 'comm' command compares two files or streams. By default, 'comm' will always display three columns. First column indicates non-matching items of first file, second column indicates non-matching items of second file, and third column indicates matching items of both the files. Both the files has to be in sorted order for 'comm' command to be executed.
   comm -23 <file1> <file2> (To display first column)
13.cat <fileName> | sed 's/<oldWord>/<newWord>/'  stream editor.  editing is not permanent. It remains only in display, but in actual, file content remains same.
14.cat or tac <fileName> | tee <newFile> |  cat or tac |.....  (The 'tee' command is similar to 'cat' command with only one difference. It puts stdin on stdout and also put them into a file.)
15.command | tr <'old'> <'new'>  (translate)
   cat <fileName> | tr  'a-z' 'ssadfasdf' (encrypts data)
   cat <fileName> | tr -d 'a' (removes all occurence of a)
  
16.cat <fileName> | uniq  (uniq command you can form a sorted list in which every word will occur only once.)
   cat <fileName> | uniq -c (count number of occurance)
17.sort <fileName> (same as cat but gives sorted list)
18.wc <fileName> (word count in file .. flags -l only line, -w only words, -c only chars)
19.od <fileName> (od' term stands for octal dump, displays ASCII values of words)
20.gzip <fileName> <fileName>(TO compress files to zip file, use tar for directories)
   gunzip <ZipFile> (to unzip)





GIT Commands
----------------------
 git init
 git remote rm origin
 git remote add origin https://github.com/user/repo.git
 git branch --set-upstream-to=origin/<branch>
 git remote -v

git status
git add --all
git commit -m "--comments--"
git push origin master
git diff
git checkout <branch>


Docker commands
--------------------

apk add curl
1.docker pull quay.io/python-devs/ci-image
2.docker image ls
3.docker container ls --all
4.docker container run --detach --name mydb -e MYSQL_ROOT_PASSWORD=my-secret-pw mysql:latest

docker container run -d -p 8080:8082 -e GOOGLE_APPLICATION_CREDENTIALS=/app/smartcableapp-211915-af70f90f4962.json -e SPRING_PROFILES_ACTIVE=dev,jpa -it 7353207901/cable-service:1.1 sh

5.docker container logs mydb

6.docker exec -it [CONTAINER_NAME] mysql --user=root --password=$MYSQL_ROOT_PASSWORD --version
7.docker exec -it a4b176be9e36 sh

8.docker image build --tag $DOCKERID/linux_tweet_app:1.0 .
 (Build using Maven plugin)Make sure Docker settting is changed to allow insecure TCP
  1.mvn package
  2.mvn install dockerfile:build

9.docker login
10.docker image push $DOCKERID/linux_tweet_app:1.0
  (Using Maven Plugin) 
   mvn dockerfile:push .

11.docker container rm --force linux_tweet_app
  docker rm -f a4b176be9e36
  docker rm -f $(docker ps -aq) ---------(remove all containers)

docker network ls

docker network create <nameof nw>

docker volume ls

docker volumen create --driver=local --name=volume1


//swarm//
docker swarm init

docker stack deploy -c trendfly-compose.yml <STACK_NAME>

docker service ls/docker stack ps/

docker stack rm <STACK_NAME>

docker swarm leave --force

docker container prune (To remove all stopped containers)

docker container run  -d -p 15672:15672 -p 5672:5672 rabbitmq:management
docker run -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.3.0
docker run -p 5601:5601 docker.elastic.co/kibana/kibana:7.3.0
Angular commands
-----------------------------

1.Install node.js
2.Install npm
3.Install angular cli: npm i -g @angular/cli
4.Start dev server:ng serve
5.new project: ng new PROJECT_NAME
6.npm update
7.Create build:ng build --prod
8.Genereate component: ng g c ComponentName <path optional >
9.Genereate service: ng g s Service <path optional >
--------------------------------------------
Maven Commands

mvn dependency:tree
mvn tomcat7:run -Dspring.profiles.active=dev

---------------------------------
AWS Commands

ssh -i mgb_aws1.pem ubuntu@18.222.24.150
ssh -i mgb_aws1.pem ec2-user@18.221.236.250
---------------------------------------------
Spring Conventions
Spring property presidence
1.application.properties
2.application-dev.properties
3.Environemnt variables
4.System variable(-D)
5.Program variables (--)

------------------------------------
Majar Issues
1.Eureka client not registering with eureka only inside docker container, works fine outside
	-Configured eureka connection only in bootstrap
	-Do not use localhost, use docker compose service name
2.Zuul not forwording requests (only docker clustor)
  Solved by adding ribbon timeout configuration(configuration file may show warning, which is safe to be ignored)
3.Zipkin not working inside docker-compose
  Solved by giving service name and overrding by below evnironment variable
  1.spring.zipkin.base-url=http://zipkin:9411/
  2.spring.sleuth.sampler.probability=1
4.Config server issue


minikube start --vm-driver hyperv --hyperv-virtual-switch "Primary Virtual Switch"


-------------------------------------------------------
Kubernates
gcloud config set project [PROJECT_ID]
gcloud config set compute/zone us-central1-b
gcloud container clusters create trendfly-cluster --num-nodes=2 (Create a cluster with name trendfly-cluster with initial 2 nodes)
gcloud container clusters list
gcloud compute instances list
gcloud container clusters describe <CLUSTER_NAME>
kubectl create -f redis-master-deployment.yaml
kubectl get pods
kubectl logs -f [POD_NAME]
kubectl exec -it [POD_NAME] sh
kubectl create -f redis-master-service.yaml
kubectl get service

kubectl scale deployment frontend --replicas=5

kubectl delete service frontend
gcloud compute forwarding-rules list
gcloud container clusters delete guestbook

//debuging
kubectl exec -it [POD_NAME] sh
nslookup <Serivice_name>  (works in pod and kubectl)
nslookup  kubernetes.default (should always work)
kubectl get endpoints [SERVICE-NAME]
wget -qO- <endpoint> (equivalent to curl)

---------------------------------

gsutil cp [file_name] gs://bucket-name/file-name





--------------
sorna password: Karupa1#